' Urbanova reference site datalogger program
'
' Patrick O'Keeffe (c) 2017
' Laboratory for Atmospheric Research at Washington State University
'
' https://github.com/urbanova/wsu-aq-ref-site

ConstTable
  Const FLUSH_TUBE_ID = 0.251 'inches, I.D. of sampling line
EndConstTable


Const SCAN_INTV = 1 'seconds
Const STAT_INTV = 30 'minutes

Const CR = CHR(13) 'carriage return

Const TWOB_405_COM = ComU3
Const TWOB_405_BAUD = 19200
Const TWOB_405_FMT = 3 '8/n/1
Const TWOB_405_REC = 128
Const TWOB_405_BUFF = 1+2*TWOB_405_REC

Const TWOB_205_COM = ComU5
Const TWOB_205_BAUD = 19200
Const TWOB_205_FMT = 3 '8/n/1
Const TWOB_205_REC = 80
Const TWOB_205_BUFF = 1+2*TWOB_205_REC

Const LI840A_COM = ComC1
Const LI840A_BAUD = 9600
Const LI840A_FMT = 3 '8/n/1, RS232 logic
Const LI840A_REC = 120
Const LI840A_BUFF = LI840A_REC*2 + 1

Const TSI_COM = ComC3
Const TSI_BAUD = 38400
Const TSI_FORMAT = 3  '8/none/1 in "binary mode"
Const TSI_BUFF = 19  '2*(9 char/rec) + 1
Const TSI_QUERY = "DBFTP0001"+CR 'request 1 binary record
Const TSI_BEGINWORD = &h80000000 'special null byte representation
Const TSI_ENDWORD = &hFFFF
Const TSI_STP_T = 21.1 'degC
Const TSI_STP_P = 101.3 'kPa
Const PI = 3.14159
Const L_PER_FT3 = 28.316847 'vol. conversion
Const R_AIR = 287.058   'specific gas constant for dry air, J/(kg K)
Const R_ = 8.3144621e-6 'universal gas constant, (kPa m^3)/(K mmol)
'part of Sutherland's fomula for deriving dynamic viscosity of air
Const SU_CONST = 120 'K
Const LAMBDA_AIR = 1.512041288 'uPa s K^-1/2
Const TUBE_AREA = PI*FLUSH_TUBE_ID*FLUSH_TUBE_ID/4 'in^2


'============================ VARIABLES =================================
Public disable_m405 As Boolean
Public m405_record As String * TWOB_405_REC
Public twob_405nm(22)
Alias twob_405nm(1)  = m405_NO2
Alias twob_405nm(2)  = m405_NO
Alias twob_405nm(3)  = m405_NOx
Alias twob_405nm(4)  = m405_NO2_zero
Alias twob_405nm(5)  = m405_NO_zero
Alias twob_405nm(6)  = m405_flow_factor
Alias twob_405nm(7)  = m405_cell_T
Alias twob_405nm(8)  = m405_cell_P
Alias twob_405nm(9)  = m405_overflow_F
Alias twob_405nm(10) = m405_cell_F
Alias twob_405nm(11) = m405_O3_F
Alias twob_405nm(12) = m405_samp_LED_V
Alias twob_405nm(13) = m405_ref_LED_V
Alias twob_405nm(14) = m405_NO_gen_V
Alias twob_405nm(15) = m405_scrubber_T
'16: date, day of month    '19: time, hour
'17: date, month           '20: time, minutes
'18: date, short year      '21: time, seconds
Alias twob_405nm(22) = m405_status
Units m405_NO2 = ppb
Units m405_NO = ppb
Units m405_NOx = ppb
Units m405_NO2_zero = ppb
Units m405_NO_zero = ppb
Units m405_cell_T = degC
Units m405_cell_P = mbar
Units m405_overflow_F = cc/min
Units m405_cell_F = cc/min
Units m405_O3_F = cc/min
Units m405_samp_LED_V = volts
Units m405_ref_LED_V = volts
Units m405_NO_gen_V = volts
Units m405_scrubber_T = degC

Public m205_record As String * TWOB_205_REC
Public twob_205(9)
Alias twob_205(1) = m205_O3
Alias twob_205(2) = m205_cell_T
Alias twob_205(3) = m205_cell_P
'4: date, day of month    '7: time, hour
'5: date, month           '8: time, minute
'6: date, short year      '9: time, second
Units m205_O3 = ppbv
Units m205_cell_T = degC
Units m205_cell_P = mbar

Public li840a_config As String * 300
Public li840a_resp As String * 32
Public li840a_record As String * LI840A_REC
Public li840a(6)
Alias li840a(1) = li840a_cell_T
Alias li840a(2) = li840a_cell_P
Alias li840a(3) = li840a_CO2
Alias li840a(4) = li840a_pwr_src
Alias li840a(5) = li840a_H2O
Alias li840a(6) = li840a_dewpoint
Units li840a_cell_T = degC
Units li840a_cell_P = mb
Units li840a_CO2 = ppm
Units li840a_pwr_src = Vdc
Units li840a_H2O = ppth
Units li840a_dewpoint = degC

Public tsi_bytes
Public tsi_record As String * 6
Public tsi_words(3) As Long
Public tmpr_msb As Long
Public tsi(3)
Alias tsi(1) = flush_massFlow
Alias tsi(2) = flush_tmpr
Alias tsi(3) = flush_press
Units flush_massFlow = sLpm
Units flush_tmpr = degC
Units flush_press = kPa
Public tube_volume
Public tsi_etc(3)
Alias tsi_etc(1) = flush_volFlow
Alias tsi_etc(2) = flush_delay
Alias tsi_etc(3) = flush_Re
Units flush_volFlow = L/min
Units flush_delay = sec
Units flush_Re = dimless

Public t100u_so2
Units t100u_so2 = ppb

Public i
Public inbetween_1min_scan As Boolean
Public just_had_1min_scan As Boolean


'================================= TABLES
DataTable(tsdata,True,10000)
  DataInterval(0,SCAN_INTV,Sec,5)
  Sample(7,twob_405nm(1),FP2) '2B Tech NOx
  Sample(1,twob_405nm(8),IEEE4)
  Sample(3,twob_405nm(9),FP2)
  Sample(2,twob_405nm(12),IEEE4)
  Sample(2,twob_405nm(14),FP2)
  Sample(1,twob_405nm(22),UINT2)
  Sample(2,twob_205(1),FP2) '2B Tech O3
  Sample(1,twob_205(3),IEEE4)
  Sample(1,li840a_CO2,FP2) 'Licor CO2
  Sample(1,li840a_H2O,FP2)
  Sample(1,li840a_cell_T,FP2)
  Sample(1,li840a_cell_P,IEEE4)
  Sample(1,li840a_dewpoint,FP2)
  Sample(1,li840a_pwr_src,FP2)
  Sample(1,flush_massFlow,FP2)
  Sample(1,flush_tmpr,FP2)
  Sample(1,flush_press,FP2)
  Sample(1,t100u_so2,IEEE4)
EndTable

DataTable(stats,True,1000)
  DataInterval(0,STAT_INTV,Min,5)
  Average(1,m405_NO2,FP2,disable_m405) '2B Tech Nox
  StdDev (1,m405_NO2,FP2,disable_m405)
  Average(1,m405_NO,FP2,disable_m405)
  StdDev (1,m405_NO,FP2,disable_m405)
  Average(1,m405_NOx,FP2,disable_m405)
  StdDev (1,m405_NOx,FP2,disable_m405)
  Average(1,m405_NO2_zero,FP2,disable_m405)
  StdDev (1,m405_NO2_zero,FP2,disable_m405)
  Average(1,m405_NO_zero,FP2,disable_m405)
  StdDev (1,m405_NO_zero,FP2,disable_m405)
  Average(2,twob_405nm(6),FP2,disable_m405)
  Average(1,twob_405nm(8),IEEE4,disable_m405)
  Average(3,twob_405nm(9),FP2,disable_m405)
  Average(2,twob_405nm(12),IEEE4,disable_m405)
  Average(2,twob_405nm(14),FP2,disable_m405)
  Average(1,m205_O3,FP2,inbetween_1min_scan OR m205_O3=NAN) '2B Tech O3
  Average(1,m205_cell_T,FP2,inbetween_1min_scan OR m205_cell_T=NAN)
  Average(1,m205_cell_P,IEEE4,inbetween_1min_scan OR m205_cell_P=NAN)
  Average(1,li840a_CO2,FP2,li840a_CO2=NAN) 'Licor LI840A
    FieldNames("li840a_CO2")
  Average(1,li840a_H2O,FP2,li840a_H2O=NAN)
    FieldNames("li840a_H2O")
  Average(1,li840a_cell_T,FP2,li840a_cell_T=NAN)
    FieldNames("li840a_cell_T")
  Average(1,li840a_cell_P,IEEE4,li840a_cell_P=NAN)
    FieldNames("li840a_cell_P")
  Average(1,li840a_dewpoint,FP2,li840a_dewpoint=NAN)
    FieldNames("li840a_dewpoint")
  Average(1,li840a_pwr_src,FP2,li840a_pwr_src=NAN)
    FieldNames("li840a_pwr_src")
  Average(1,flush_massFlow,FP2,flush_massFlow=NAN)
  StdDev (1,flush_massFlow,FP2,flush_massFlow=NAN)
  Average(1,flush_tmpr,FP2,flush_tmpr=NAN)
  Average(1,flush_press,FP2,flush_press=NAN)
  Average(1,flush_volFlow,FP2,flush_volFlow=NAN)
  StdDev (1,flush_volFlow,FP2,flush_volFlow=NAN)
  Average(1,flush_delay,FP2,flush_delay=NAN)
  StdDev (1,flush_delay,FP2,flush_delay=NAN)
  Average(1,flush_Re,IEEE4,flush_Re=NAN)
EndTable

'======================= MENU
Const Off = False
Const Recording = True
DisplayMenu("WSU AQ Ref Site",-2)
  SubMenu("Monitor data")
    SubMenu("NOx (2B Tech)")
      DisplayValue("2B NO,  ppb", m405_NO)
      DisplayValue("2B NO2, ppb", m405_NO2)
      DisplayValue("2B NOx, ppb", m405_NOx)
    EndSubMenu
    SubMenu("O3 (2B Tech)")
      DisplayValue("O3", m205_O3)
      DisplayValue("Cell tmpr.", m205_cell_T)
      DisplayValue("Cell press.", m205_cell_P)
    EndSubMenu
    SubMenu("CO2/H2O (Licor)")
      DisplayValue("CO2", li840a_CO2)
      DisplayValue("H2O", li840a_H2O)
      DisplayValue("Cell tmpr.", li840a_cell_T)
      DisplayValue("Cell press.", li840a_cell_P)
      DisplayValue("Dewpoint", li840a_dewpoint)
      DisplayValue("Power in", li840a_pwr_src)
    EndSubMenu
    SubMenu("SO2 (TAPI)")
      DisplayValue("SO2, ppb", t100u_so2)
    EndSubMenu
    SubMenu("Flow (TSI)")
      DisplayValue("Flow, sLpm", flush_massFlow)
      DisplayValue("Tmpr, degC", flush_tmpr)
      DisplayValue("Press, kPa", flush_press)
    EndSubMenu
  EndSubMenu
EndMenu

'================================= FUNCTIONS =================================
'TSI Models 4040/4043/4045 General Purpose Thermal Mass Flowmeter Operation
'    and Service Manual. Appendix B. August 2001. Revision D
'[StdFlow] = std L/min @ TSI specs, [Tmpr] = C, [Press] = kPa
Function volumetric_flow(StdFlow, Tmpr, Press) As Float 'Lpm
  Return (StdFlow * ((273.15+Tmpr)/(273.15+TSI_STP_T)) * (TSI_STP_P/Press))
EndFunction

'[VolFlow] = L/min
Function estimate_lag(VolFlow) As Float 'sec
  Return (60 * tube_volume / VolFlow))  '(60sec/min)(L)(min/L)
EndFunction

'https://en.wikipedia.org/wiki/Viscosity
'[Tmpr] = C
Function dynamic_viscosity(Tmpr) As Float 'kg/(m*s) = Pa*s
  '(uPa*s/K^1/2)(K^3/2)(1/K) * (Pa/10^6 uPa)
  Return (LAMBDA_AIR * (Tmpr+273.15)^1.5 / ((Tmpr+273.15+SU_CONST)*10^6))
EndFunction

'[Tmpr] = C, [Press] = kPa (abs.)
Function density_of_air(Tmpr, Press) As Float 'kg/m^3
  '(Pa/kPa)(kPa)(kg*K / J)(1/K)(J / Pa*m^3)
  Return (1000*Press / (R_AIR*(Tmpr+273.15)))
EndFunction

'https://en.wikipedia.org/wiki/Reynolds_number
'[VolFlow] = L/min, [Tmpr] = C, [Press] = kPa (abs.)
'HINT return as a Float but use FIX() to drop fractional portion
Function reynolds_num(VolFlow, Tmpr, Press) As Float 'dimless
  Dim mu, rho
  mu = dynamic_viscosity(Tmpr)
  rho = density_of_air(Tmpr, Press)
  '(kg/m^3)(L/min)(in)(m*s/kg)(1/in^2) * (min/60 sec)(39.37in/m)(m^3/1000L)
  Return Round((rho*VolFlow*FLUSH_TUBE_ID*39.37)/(mu*TUBE_AREA*60*1000), -1)
EndFunction


'============================== SUBROUTINES =================================
Sub setup_li840a()
  li840a_config = ("<li840><cfg><outrate>1</outrate></cfg><rs232><co2>true</co2>" & _
        "<co2abs>false</co2abs><h2o>true</h2o><h2odewpoint>true</h2odewpoint>" & _
        "<h2oabs>false</h2oabs><celltemp>true</celltemp><cellpres>true</cellpres>" & _
        "<ivolt>true</ivolt><raw>false</raw><strip>true</strip></rs232></li840>")
  li840a_resp = ("<li840><ack>true</ack></li840>")
  SerialOpen(LI840A_COM,LI840A_BAUD,LI840A_FMT,0,LI840A_BUFF)
  SerialOut(LI840A_COM,li840a_config,li840a_resp,3,1)
  Move(li840a(1),6,NAN,1)         'inclusion of 0 in first averages produced
EndSub

Sub setup_m405()
  SerialOpen(TWOB_405_COM,TWOB_405_BAUD,TWOB_405_FMT,0,TWOB_405_BUFF)
  Move(twob_405nm(1),22,NAN,1)
EndSub

Sub setup_m205()
  SerialOpen(TWOB_205_COM,TWOB_205_BAUD,TWOB_205_FMT,0,TWOB_205_BUFF)
  Move(twob_205(1),3,NAN,1)
EndSub

Sub setup_tsi4043()
  SerialOpen(TSI_COM,TSI_BAUD,TSI_FORMAT,0,TSI_BUFF)
  Move(tsi(1),3,NAN,1)
EndSub


'========================= MAIN PROGRAM =====================================
BeginProg
  setup_li840a()
  setup_m405()
  setup_m205()
  setup_tsi4043()

	Scan (SCAN_INTV,sec,0,0)
    SerialIn(m405_record,TWOB_405_COM,100,&h0D,TWOB_405_REC)
    If (Len(m405_record)) Then
      SplitStr(twob_405nm(1),m405_record,"",22,0)
      If (twob_405nm(21) = NAN) Then Move(twob_405nm(1),21,NAN,1)
      SerialFlush(TWOB_405_COM)
    EndIf

    SerialIn(li840a_record,LI840A_COM,50,&h0A,LI840A_BUFF)
    If (Len(li840a_record)) Then
      SplitStr(li840a(1),li840a_record,"",6,0)
      li840a_cell_P *= 10 'kPa -> mbar
    Else
      Move(li840a(1),6,NAN,1)
    EndIf

    SerialInRecord(TSI_COM,tsi_record,TSI_BEGINWORD,0,TSI_ENDWORD,tsi_bytes,11)
    SerialOut(TSI_COM,TSI_QUERY,"",0,0) 'ask for next measurement
    MoveBytes(tsi_words(1),2,tsi_record,0,2) 'flow
    MoveBytes(tsi_words(3),2,tsi_record,4,2) 'press
    'HINT string-indexing is 1-based but MoveBytes indexing is 0-based
    tmpr_msb = ASCII(tsi_record(1,1,3)) 'grab sign & MSB as # (0-255)
    tsi_words(2) = (tmpr_msb AND &h7F) << 8 'drop sign, push into 2nd byte pos
    MoveBytes(tsi_words(2),3,tsi_record,3,1) 'move LSB into 1st byte pos
    If (tmpr_msb AND &h80) Then tsi_words(2) -= 32768 'apply sign
    For i = 1 To 3 'now scale to decimal
      tsi(i) = tsi_words(i)/100.0
    Next
    'HACK datalogger reads consecutive leading null bytes (e.g. flow = 0.00)
    'incorrectly; if abs. press is 0, then move values into correct vars
    If (flush_press <= 0) Then
      flush_press = flush_tmpr
      flush_tmpr = flush_massFlow
      flush_massFlow = 0
    EndIf
    'HACK still possible for datalogger to hiccup if MSB of flow is 0x00 so 
    'we also conduct naive sanity check on temperature value and throw out
    'data if suspect
    If (flush_tmpr > 50) Then '>122*F ?
      flush_massFlow = NAN
      flush_press = NAN
      flush_tmpr = NAN
      flush_volFlow = NAN
      flush_delay = NAN
      flush_Re = NAN
    Else
      flush_volFlow = volumetric_flow(flush_massFlow, flush_tmpr, flush_press)
      flush_delay = IIF(tube_volume > 0, estimate_lag(flush_volFlow), NAN)
      flush_Re = IIF(flush_volFlow > 0, _
                      reynolds_num(flush_volFlow, flush_tmpr, flush_press), 0)
    EndIf

    VoltDiff(t100u_so2,1,mv5000,U7,True,0,60,(100/5000),0)

    CallTable(tsdata)
    CallTable(stats)
    'CallTable(debug)
    
    inbetween_1min_scan = True
    If (just_had_1min_scan) Then
      just_had_1min_scan = False
      inbetween_1min_scan = False
    EndIf
	NextScan


SlowSequence
  Scan(1,Min,1,0)
    SerialIn(m205_record,TWOB_205_COM,100,&h0D,TWOB_205_REC)
    If (Len(m205_record)) Then
      SplitStr(twob_205(1),m205_record,"",9,0)
      If (twob_205(9)=NAN OR m205_cell_P < 800 OR m205_cell_P > 1300) Then
        Move(twob_205(1),9,NAN,1)
      EndIf
      SerialFlush(TWOB_205_COM)
    EndIf

    just_had_1min_scan = True
  NextScan

EndProg
